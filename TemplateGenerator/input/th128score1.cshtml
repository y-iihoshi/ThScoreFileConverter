@using TemplateGenerator.Models.Th128
@{
    ViewData["Title"] = $"{Definitions.Title} スコアデータ";
    var levelKeyTotal = Definitions.LevelKeysTotalFirst.First();
    var routeKeyTotal = Definitions.RouteKeysTotalFirst.First();
}
@section Styles {
<style>
/* <![CDATA[ */
    td.route { min-width: 70px; }
    td.name { min-width: 70px; }
    td.score { min-width: 70px; }
    td.level { min-width: 70px; }
    td.stage { min-width: 70px; }
    td.date { min-width: 120px; }
    td.slow { min-width: 50px; }
    table.count td.count { min-width: 80px; }
    table.count td.time { min-width: 80px; }
/* ]]> */
</style>
}
@section Navigation {
    <ul>
     <li>スコアデータ全般</li>
     <li><a href="th128score2.html">個別ランキング</a></li>
     <li><a href="th128card.html">御札戦歴</a></li>
    </ul>
    <ul>
    @foreach (var level in Definitions.LevelNames)
    {
     <li><a href="#@(level.Value)">@Html.Raw(level.Value)</a></li>
    }
     <li><a href="#Other">その他の状態一覧</a></li>
     <li><a href="#Clear">クリア達成度</a></li>
    </ul>
}

   <section>
    <h2>難易度別スコア</h2>

    @foreach (var level in Definitions.LevelNames)
    {
    <table class="score_per_level">
     <caption id="@(level.Value)">@Html.Raw(level.Value)</caption>
     <thead>
      <tr>
       <th class="route">Route</th>
       <th class="name">Name</th>
       <th class="score">Score</th>
       <th class="date">Date</th>
       <th class="stage">Stage</th>
       <th class="slow">Slow</th>
      </tr>
     </thead>
     <tbody>
        @foreach (var route in Definitions.RouteNames.Where(pair => (level.Key == "X") ^ (pair.Key != "EX")))
        {
      <tr>
       <td class="route">@Html.Raw(route.Value)</td>
       <td class="name">%T128SCR@(level.Key)@(route.Key)11</td>
       <td class="score">%T128SCR@(level.Key)@(route.Key)12</td>
       <td class="date">%T128SCR@(level.Key)@(route.Key)14</td>
       <td class="stage">%T128SCR@(level.Key)@(route.Key)13</td>
       <td class="slow">%T128SCR@(level.Key)@(route.Key)15</td>
      </tr>
        }
     </tbody>
    </table>
@:
    }
   </section>

   <hr />

   <section>
    <h2 id="Other">その他の状態一覧</h2>

    <table class="count">
     <thead>
      <tr>
       <th rowspan="2" class="route">Route</th>
       <th rowspan="2" class="count">総プレイ回数</th>
       <th rowspan="2" class="time">プレイ時間</th>
       <th colspan="6">クリア回数</th>
      </tr>
      <tr>
    @foreach (var levelKey in Definitions.LevelKeysTotalLast)
    {
       <th class="level">@Html.Raw(Definitions.LevelWithTotalNames[levelKey])</th>
    }
      </tr>
     </thead>
     <tbody>
    @foreach (var route in Definitions.RouteNames)
    {
      <tr>
       <td class="route">@Html.Raw(route.Value)</td>
       <td class="count">%T128ROUTE@(route.Key)1</td>
       <td class="time">%T128ROUTE@(route.Key)2</td>
        @foreach (var levelKey in Definitions.LevelKeysTotalLast)
        {
            var routeExFormat = string.Format("%T128ROUTEEX{0}{1}3", levelKey, route.Key);
            if ((levelKey != levelKeyTotal) && ((levelKey == "X") ^ (route.Key == "EX")))
                routeExFormat = "N/A";
       <td class="level">@(routeExFormat)</td>
        }
      </tr>
    }
     </tbody>
     <tfoot>
      <tr>
       <td class="route">@Html.Raw(Definitions.RouteWithTotalNames[routeKeyTotal])</td>
       <td class="count">%T128ROUTE@(routeKeyTotal)1</td>
       <!-- <td class="time">%T128ROUTE@(routeKeyTotal)2</td> -->
       <td class="time">%T128TIMEPLY</td>
    @foreach (var levelKey in Definitions.LevelKeysTotalLast)
    {
       <td class="level">%T128ROUTEEX@(levelKey)@(routeKeyTotal)3</td>
    }
      </tr>
     </tfoot>
    </table>
   </section>

   <hr />

   <section>
    <h2 id="Clear">クリア達成度</h2>

    <table class="clear">
     <thead>
      <tr>
       <th class="route">Route</th>
    @foreach (var level in Definitions.LevelNames)
    {
       <th class="level">@Html.Raw(level.Value)</th>
    }
      </tr>
     </thead>
     <tbody>
    @foreach (var route in Definitions.RouteNames)
    {
      <tr>
       <td class="route">@Html.Raw(route.Value)</td>
        @foreach (var level in Definitions.LevelNames)
        {
            var clearFormat = string.Format("%T128CLEAR{0}{1}", level.Key, route.Key);
            if ((level.Key == "X") ^ (route.Key == "EX"))
                clearFormat = "N/A";
       <td class="stage">@(clearFormat)</td>
        }
      </tr>
    }
     </tbody>
    </table>
   </section>
